// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["jsonProtocol"]
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



//datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
//}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}




model User {
  id    String  @id @default(uuid())
  name  String?
  email String? @unique
  emailVerified DateTime?
  password String
  phone String
  avatar String
  title String
  bio String
 
 status UserStatus
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   accounts Account[]
  sessions  Session[]

  carts Cart[]
  Shipping Shipping[]
  orders Order[]
  profile Profile[]
  product Product[]
  posts Post[]

}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id    String  @id @default(uuid())
  title     String
  content   String
  published Boolean
  User  User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Profile{
  id    String  @id @default(uuid())
  title String
  introduction String
  User  User?   @relation(fields: [userId], references: [id])
  userId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imgSlide ImgSlide[]
}

model ImgSlide {
  id  String @id @default(uuid())
  Profile  Profile?   @relation(fields: [profileId], references: [id])
  profileId String?
  url String
  
}



model Category {
  id    String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo String?
  tambnail String?
  product Product[]
}



model Product {
  id    String @id @default(uuid())
  title String
  description String
  price Float
  stock Int?
  supplierUrl String?
  User  User?   @relation(fields: [userId], references: [id])
  userId String?
  Category  Category?   @relation(fields: [catId], references: [id])
  catId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photo String?
  tambnail String?
  itemsCart ItemsCart[]
  imgs Img[]
}




model Img {
  id  String @id @default(uuid())
  url String
  Product  Product? @relation(fields: [productId], references: [id])
  productId String?
}



model Cart {
  id  String @id @default(uuid())
  User  User?   @relation(fields: [userId], references: [id])
  userId String?  
  totalPrice Float
  qtdTotal Int
  status CartStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemsCart ItemsCart[]
  shipping Shipping[]
  order Order[]
}

model ItemsCart {
  id String @id @default(uuid())
  Product  Product? @relation(fields: [productId], references: [id])
  productId String?
  Cart  Cart?   @relation(fields: [cartId], references: [id])
  cartId String?
  

}


model Shipping{
  id  String @id @default(uuid())
  User  User?   @relation(fields: [userId], references: [id])
  userId String?
  Cart  Cart?   @relation(fields: [cartId], references: [id])
  cartId String?
  address String
  number String
  complementary String
  district String
  city String
  state String
  zip String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}


model Order {
  id  String @id @default(uuid())
  User  User?   @relation(fields: [userId], references: [id])
  userId String?
  Cart  Cart?   @relation(fields: [cartId], references: [id])
  cartId String?
  totalPrice Float
  status OrderStatus 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}


enum CartStatus {
  STARTED
  ABANDONED
  FINISHED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserStatus {
  ADM
  SELLER
  ENDUSER
  
}



